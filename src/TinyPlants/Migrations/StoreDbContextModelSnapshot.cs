// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TinyPlants.Data;

#nullable disable

namespace TinyPlants.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TinyPlants.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("TinyPlants.Models.CartItems", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("TinyPlants.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TinyPlants.Models.OrderItems", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TinyPlants.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A combination of multiple small cactuses",
                            Image = "/images/CAC001.jpg",
                            IsFeatured = true,
                            Name = "Atlantic",
                            Price = 12m,
                            Sku = "CAC001"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A hot pink little cactus to bright up your room",
                            Image = "/images/CAC002.jpg",
                            IsFeatured = true,
                            Name = "Rosette",
                            Price = 9m,
                            Sku = "CAC002"
                        },
                        new
                        {
                            Id = 3,
                            Description = "This cactus with elegant-looking glass is perfect for your desk",
                            Image = "/images/CAC003.jpg",
                            IsFeatured = false,
                            Name = "Pastel",
                            Price = 7m,
                            Sku = "CAC003"
                        },
                        new
                        {
                            Id = 4,
                            Description = "This cute little coral will definitely lighten up your mood",
                            Image = "/images/CAC004.jpg",
                            IsFeatured = true,
                            Name = "Coral",
                            Price = 10m,
                            Sku = "CAC004"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The unique looking little parakeet is one of the tiny plants that you must have",
                            Image = "/images/CAC005.jpg",
                            IsFeatured = false,
                            Name = "Parakeet",
                            Price = 18m,
                            Sku = "CAC005"
                        },
                        new
                        {
                            Id = 6,
                            Description = "This spiky and layered looking cactus is defenitely a rare found",
                            Image = "/images/CAC006.jpg",
                            IsFeatured = false,
                            Name = "Crimson",
                            Price = 17m,
                            Sku = "CAC006"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A blue orchid is one of the best indoor plants that you can have",
                            Image = "/images/FLW001.jpg",
                            IsFeatured = false,
                            Name = "Arctic",
                            Price = 24m,
                            Sku = "FLW001"
                        },
                        new
                        {
                            Id = 8,
                            Description = "This ornamental plant comes with violet flowers and kokedama that adds more style to your plant",
                            Image = "/images/FLW002.jpg",
                            IsFeatured = false,
                            Name = "Violet Kokedama",
                            Price = 29m,
                            Sku = "FLW002"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Bamboo is easy to take care of and it grows fast",
                            Image = "/images/PLN001.jpg",
                            IsFeatured = false,
                            Name = "Bamboo",
                            Price = 26m,
                            Sku = "PLN001"
                        },
                        new
                        {
                            Id = 10,
                            Description = "This plant can live in water and it makes a great indoor plant",
                            Image = "/images/PLN002.jpg",
                            IsFeatured = false,
                            Name = "Hyacinth",
                            Price = 22m,
                            Sku = "PLN002"
                        });
                });

            modelBuilder.Entity("TinyPlants.Models.CartItems", b =>
                {
                    b.HasOne("TinyPlants.Models.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TinyPlants.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TinyPlants.Models.OrderItems", b =>
                {
                    b.HasOne("TinyPlants.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TinyPlants.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
